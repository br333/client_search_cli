#!/usr/bin/env ruby
# frozen_string_literal: true

require 'optparse'
require 'colorize'
require 'awesome_print'
require_relative '../lib/shiftcare'

options = {}
options[:query] = {}
commands = %w[duplicates query]

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: json-parser [command] [options]\n\nCommands: duplicates, query"

  opts.on('-f', '--file FILE', 'JSON file name, i.e --file clients.json') do |f|
    options[:file] = f
  end

  opts.on('-q', '--query KEY=VALUE', 'Query JSON content i.e --query KEY=VAL') do |val|
    k, v = val.split('=')
    parsed_value = if v =~ /\A\d+\z/
                     v.to_i
                   else
                     v
                   end
    options[:query][k.to_sym] = parsed_value
  end

  opts.on('-m', '--metadata', 'Force generation of metadata even if it exists') do |_val|
    options[:generate_metadata] = true
  end

  opts.on('-s', '--schema', 'Validate JSON against schema') do |_val|
    options[:validate_schema] = true
  end

  opts.on('-h', '--help', 'Show help') do
    puts opts
    exit
  end
end

command = ARGV.shift
opt_parser.parse!

file = options[:file] || 'clients.json'

unless commands.include?(command)
  puts "Invalid or missing command. Available: #{commands.join(', ')}"
  exit 1
end

puts 'Preparing paths...'.light_blue
Shiftcare::Utils::Generators::Directory.generate_paths
puts 'Fetching data source...'.light_blue
Shiftcare::Utils::Downloader.new.call(file)
puts 'Loading data...'.light_blue
data = Shiftcare::Data.new(file)

if options[:generate_metadata]
  puts 'Generating metadata (forced)...'.light_blue
  data.metadata.generate
elsif data.metadata.parser.check_file
  puts "Using existing metadata located at #{data.metadata.parser.full_path}".green
else
  puts 'Metadata not found, generating...'.yellow
  data.metadata.generate
end

if options[:validate_schema]
  puts 'Validating schema...'.light_blue
  data.schema.validate!
  puts "Invalid items count: #{data.schema.invalid_items_count}".red
  puts "Invalid indexes: #{data.schema.invalid_items_indexes.inspect}".yellow
else
  puts 'Skipping schema validation...'.light_blue
end

case command
when 'duplicates'
  puts 'Duplicates:'.yellow
  ap data.query.duplicates
when 'query'
  if options[:query] && !options[:query].empty?
    results = data.query.where(options[:query])
    puts "Found #{results&.size || 0} record(s):".green
    ap results, indent: 2
  else
    puts 'Filter requires --query and --value'.yellow
  end
end
